Index: README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># ChatApp  #\r\n\r\n\r\n## Architecture ##\r\n \r\n\r\n## Run ##\r\n\r\n0. move to project root folder\r\n\r\n1. Install requirements\r\n```bash\r\npip install -r requirements\r\n```\r\n2. Create a MySQL database\r\n```sql\r\nCREATE DATABASE oo_community CHARACTER SET utf8;\r\n```\r\n4. Start Redis Server\r\n```bash\r\ndocker run -p 6379:6379 -d redis:5\r\n```\r\n5. Init database\r\n```bash\r\npython manage.py migrate\r\n```\r\n6. Run development server\r\n```bash\r\npython manage.py runserver\r\n```\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/README.md b/README.md
--- a/README.md	(revision efeedb375119a7dd82611d86adbbab633edfe2cd)
+++ b/README.md	(date 1650433832387)
@@ -1,7 +1,6 @@
 # ChatApp  #
 
 
-## Architecture ##
  
 
 ## Run ##
@@ -10,17 +9,32 @@
 
 1. Install requirements
 ```bash
-pip install -r requirements
+pip install -r requirements.txt
+```
+2. Set database mysql.
 ```
-2. Create a MySQL database
+1. install mysql 8.0 (versions >5.6 is ok)
+2. Add mysql as environment variable
+```
+3. Change setting.py in mysite to fit the correct account and password.
+![img_2.png](img_2.png)
+4. Create a MySQL database
 ```sql
 CREATE DATABASE oo_community CHARACTER SET utf8;
 ```
-4. Start Redis Server
+![img.png](img.png)
+4. Start Redis Server 
+```angular2html
+1. install docker desktop (for Windows) 4.4.4
+Link: https://docs.docker.com/desktop/windows/release-notes/
+
+2. install wsl package following the tips (finish step 4, 5)
+```
+![img_1.png](img_1.png)
 ```bash
 docker run -p 6379:6379 -d redis:5
 ```
-5. Init database
+5. Init database 
 ```bash
 python manage.py migrate
 ```
@@ -28,4 +42,5 @@
 ```bash
 python manage.py runserver
 ```
-
+##### For step 5,6 if python not environmental variable using pycharm terminal
+##### Please use python 3.9 (suggested)
\ No newline at end of file
Index: user/migrations/0002_userprofile_city.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/user/migrations/0002_userprofile_city.py b/user/migrations/0002_userprofile_city.py
deleted file mode 100644
--- a/user/migrations/0002_userprofile_city.py	(revision efeedb375119a7dd82611d86adbbab633edfe2cd)
+++ /dev/null	(revision efeedb375119a7dd82611d86adbbab633edfe2cd)
@@ -1,18 +0,0 @@
-# Generated by Django 3.2 on 2022-04-12 15:08
-
-from django.db import migrations, models
-
-
-class Migration(migrations.Migration):
-
-    dependencies = [
-        ('user', '0001_initial'),
-    ]
-
-    operations = [
-        migrations.AddField(
-            model_name='userprofile',
-            name='city',
-            field=models.CharField(max_length=32, null=True),
-        ),
-    ]
Index: fans/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import json\r\n\r\nfrom django.db.models import Q, F, Max\r\nfrom django.http import JsonResponse\r\nfrom django.views.decorators.http import require_http_methods\r\nfrom user.models import UserProfile\r\nfrom .models import Following\r\n\r\n\r\n# Create your views here.\r\n\r\n# 【GET】返回 用户关注的人 的列表\r\n# 【POST】关注用户\r\n@require_http_methods([\"GET\", \"POST\"])\r\ndef following(request):\r\n    if request.method == 'GET':\r\n        user_id = request.GET.get(\"user_id\")\r\n        following_ids = Following.objects.filter(user_id=user_id).order_by(\"created_time\").values(\"following\")\r\n        followings_info = []\r\n        for x in following_ids:\r\n            info = UserProfile.objects.filter(id=x['following']) \\\r\n                .annotate(username=F('name'), moment=F(\"moments_info__content\")).order_by('-moments_info__ctime') \\\r\n                .values(\"username\", \"email\", \"photo\", \"actual_name\", \"gender\", \"birth\",\r\n                        \"signature\", \"id\", \"moment\")[0]\r\n            followings_info.append(info)\r\n        result = {\r\n            \"error_code\": 200,\r\n            \"msg\": \"success\",\r\n            \"data\": {\r\n                \"user_id\": user_id,\r\n                \"following_list\": followings_info\r\n            }\r\n        }\r\n        return JsonResponse(result, status=200)\r\n    elif request.method == 'POST':\r\n        request_body = json.loads(request.body)\r\n        user_id = request_body.get(\"user_id\")\r\n        following_id = request_body.get(\"following_id\")\r\n        try:\r\n            obj, isCreated = Following.objects.get_or_create(user_id=user_id, following_id=following_id)\r\n            if isCreated:\r\n                result = {\r\n                    \"error_code\": 200,\r\n                    \"msg\": \"user_\" + str(user_id) + ' follows user_' + str(following_id) + \" successfully.\",\r\n                }\r\n            else:\r\n                result = {\r\n                    \"error_code\": 200,\r\n                    \"msg\": \"user_\" + str(user_id) + ' has already followed user_' + str(\r\n                        following_id) + \" successfully.\",\r\n                }\r\n            return JsonResponse(result, status=200)\r\n        except Exception as e:\r\n            print(e)\r\n            result = {\r\n                \"error_code\": 500,\r\n                \"msg\": 'Something wrong happens. Try again later.',\r\n            }\r\n            return JsonResponse(result, status=500)\r\n    else:\r\n        result = {\r\n            \"error_code\": 400,\r\n            'msg': 'INVALID REQUEST'\r\n        }\r\n        return JsonResponse(result, status=400)\r\n\r\n\r\n# 【POST】取消关注\r\n@require_http_methods([\"POST\"])\r\ndef following_delete(request):\r\n    user_id = request.POST.get(\"user_id\")\r\n    following_id = request.POST.get(\"following_id\")\r\n    try:\r\n        following_obj = Following.objects.get(user_id=user_id, following_id=following_id)\r\n        following_obj.delete()\r\n        result = {\r\n            \"error_code\": 200,\r\n            \"msg\": \"user_\" + str(user_id) + ' cancels following user_' + str(following_id) + \" successfully.\",\r\n        }\r\n        return JsonResponse(result, status=200)\r\n    except Following.DoesNotExist:\r\n        result = {\r\n            \"error_code\": 430,\r\n            'msg': 'The following relationship does not exist.'\r\n        }\r\n        return JsonResponse(result, status=430)\r\n    except Following.MultipleObjectsReturned:\r\n        followings = Following.objects.filter(user_id=user_id, following_id=following_id)\r\n        followings.delete()\r\n        result = {\r\n            \"error_code\": 200,\r\n            \"msg\": \"user_\" + str(user_id) + ' cancels following user_' + str(following_id) + \" successfully.\",\r\n        }\r\n        return JsonResponse(result, status=200)\r\n    except Exception as e:\r\n        print(e)\r\n        result = {\r\n            \"error_code\": 500,\r\n            \"msg\": 'Something wrong happens. Try again later.',\r\n        }\r\n        return JsonResponse(result, status=500)\r\n\r\n\r\n# 【GET】返回粉丝列表\r\n@require_http_methods([\"GET\"])\r\ndef fans(request):\r\n    user_id = request.GET.get(\"user_id\")\r\n    print(user_id)\r\n    try:\r\n        fan_ids = Following.objects.filter(following_id=user_id).order_by('created_time').values('user')\r\n        fans_info = []\r\n        for x in fan_ids:\r\n            info = UserProfile.objects.filter(id=x['user']) \\\r\n                .annotate(username=F('name'), moment=F('moments_info__content')).order_by('-moments_info__ctime') \\\r\n                .values(\"username\", \"email\", \"photo\", \"actual_name\", \"gender\", \"birth\", \"signature\", \"id\", \"moment\")[0]\r\n            fans_info.append(info)\r\n        result = {\r\n            \"error_code\": 200,\r\n            \"msg\": \"success\",\r\n            \"data\": {\r\n                \"user_id\": user_id,\r\n                \"fans_list\": fans_info\r\n            }\r\n        }\r\n        return JsonResponse(result, status=200)\r\n    except Exception as e:\r\n        print(e)\r\n        result = {\r\n            \"error_code\": 500,\r\n            \"msg\": 'Something wrong happens. Try again later.',\r\n        }\r\n        return JsonResponse(result, status=500)\r\n\r\n\r\n# 【GET】关键词搜索关注的人\r\n@require_http_methods([\"GET\"])\r\ndef search(request):\r\n    user_id = request.GET.get(\"user_id\")\r\n    keyword = request.GET.get('keyword')\r\n\r\n    if keyword == \"\":\r\n        following_ids = Following.objects.filter(user_id=user_id).order_by(\"created_time\").values(\"following\")\r\n        followings_info = []\r\n        for x in following_ids:\r\n            info = UserProfile.objects.filter(id=x['following']) \\\r\n                .annotate(username=F('name'), moment=F(\"moments_info__content\")).order_by('-moments_info__ctime') \\\r\n                .values(\"username\", \"email\", \"photo\", \"actual_name\", \"gender\", \"birth\",\r\n                        \"signature\", \"id\", \"moment\")[0]\r\n            followings_info.append(info)\r\n        result = {\r\n            \"error_code\": 200,\r\n            \"msg\": \"success\",\r\n            \"data\": {\r\n                \"user_id\": user_id,\r\n                \"following_list\": followings_info\r\n            }\r\n        }\r\n        return JsonResponse(result, status=200)\r\n    else:\r\n        try:\r\n            following_ids = Following.objects.filter(\r\n                Q(user_id=user_id) & Q(following__name__contains=keyword)).order_by('created_time')\\\r\n                .values(\"following\")\r\n            followings_info = []\r\n            for x in following_ids:\r\n                info = UserProfile.objects.filter(id=x['following']) \\\r\n                    .annotate(username=F('name'), moment=F(\"moments_info__content\")).order_by('-moments_info__ctime') \\\r\n                    .values(\"username\", \"email\", \"photo\", \"actual_name\", \"gender\", \"birth\",\r\n                            \"signature\", \"id\", \"moment\")[0]\r\n                followings_info.append(info)\r\n            result = {\r\n                \"error_code\": 200,\r\n                \"msg\": \"success\",\r\n                \"data\": {\r\n                    \"user_id\": user_id,\r\n                    \"following_list\": followings_info\r\n                }\r\n            }\r\n            return JsonResponse(result, status=200)\r\n        except Exception as e:\r\n            print(e)\r\n            result = {\r\n                \"error_code\": 500,\r\n                \"msg\": 'Something wrong happens. Try again later.',\r\n            }\r\n            return JsonResponse(result, status=500)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/fans/views.py b/fans/views.py
--- a/fans/views.py	(revision efeedb375119a7dd82611d86adbbab633edfe2cd)
+++ b/fans/views.py	(date 1650390044638)
@@ -34,6 +34,7 @@
         return JsonResponse(result, status=200)
     elif request.method == 'POST':
         request_body = json.loads(request.body)
+        print(request_body)
         user_id = request_body.get("user_id")
         following_id = request_body.get("following_id")
         try:
Index: .idea/backend.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"PYTHON_MODULE\" version=\"4\">\r\n  <component name=\"FacetManager\">\r\n    <facet type=\"django\" name=\"Django\">\r\n      <configuration>\r\n        <option name=\"rootFolder\" value=\"$MODULE_DIR$\" />\r\n        <option name=\"settingsModule\" value=\"mysite/settings.py\" />\r\n        <option name=\"manageScript\" value=\"$MODULE_DIR$/manage.py\" />\r\n        <option name=\"environment\" value=\"&lt;map/&gt;\" />\r\n        <option name=\"doNotUseTestRunner\" value=\"false\" />\r\n        <option name=\"trackFilePattern\" value=\"migrations\" />\r\n      </configuration>\r\n    </facet>\r\n  </component>\r\n  <component name=\"NewModuleRootManager\">\r\n    <content url=\"file://$MODULE_DIR$\" />\r\n    <orderEntry type=\"jdk\" jdkName=\"Python 3.7\" jdkType=\"Python SDK\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n  </component>\r\n  <component name=\"PyDocumentationSettings\">\r\n    <option name=\"format\" value=\"PLAIN\" />\r\n    <option name=\"myDocStringFormat\" value=\"Plain\" />\r\n  </component>\r\n  <component name=\"TemplatesService\">\r\n    <option name=\"TEMPLATE_CONFIGURATION\" value=\"Django\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/backend.iml b/.idea/backend.iml
--- a/.idea/backend.iml	(revision efeedb375119a7dd82611d86adbbab633edfe2cd)
+++ b/.idea/backend.iml	(date 1650387727647)
@@ -14,7 +14,7 @@
   </component>
   <component name="NewModuleRootManager">
     <content url="file://$MODULE_DIR$" />
-    <orderEntry type="jdk" jdkName="Python 3.7" jdkType="Python SDK" />
+    <orderEntry type="jdk" jdkName="Python 3.9 (Fir_don)" jdkType="Python SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
   <component name="PyDocumentationSettings">
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.7\" project-jdk-type=\"Python SDK\" />\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision efeedb375119a7dd82611d86adbbab633edfe2cd)
+++ b/.idea/misc.xml	(date 1650387727652)
@@ -1,4 +1,4 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.7" project-jdk-type="Python SDK" />
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.9 (Fir_don)" project-jdk-type="Python SDK" />
 </project>
\ No newline at end of file
